import java.util.*;

public class LC_0924_MinimizeMalwareSpread {

    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        Arrays.sort(initial);
        List<Set<Integer>> groups = this.doGrouping(graph);
        List<Set<Integer>> infected = this.getInfections(groups, initial);
        
        int maxSavedNodes = 0;
        int resultNode = initial[0];
        
        for (int i=0; i<groups.size(); i++){
            if (infected.get(i).size() == 1) {
                if (groups.get(i).size() > maxSavedNodes) {
                    maxSavedNodes = groups.get(i).size();
                    for (Integer nodeNum : infected.get(i))
                        resultNode = nodeNum;
                    continue;
                } 
                if (groups.get(i).size() == maxSavedNodes) {
                    for (Integer nodeNum : infected.get(i)) {
                        if (nodeNum < resultNode) {
                            resultNode = nodeNum;
                        }
                    }
                }
            }
        }
        
        return resultNode;
    }
    
    private List<Set<Integer>> doGrouping(int[][] graph) {
        
        List<Set<Integer>> list = new ArrayList<>();
        Set<Integer> visited = new HashSet<>();
        
        int n = graph.length;
        
        for (int i=0; i<n; i++) {
            
            if (!visited.contains(i)) {
                Set<Integer> set = this.getConnectNodes(i, graph, visited);
                list.add(set);
            }  
        }
        
        return list;
    }
    
    private Set<Integer> getConnectNodes(int node, int[][] graph, Set<Integer> visited) {
        
        int n = graph.length;
        
        Queue<Integer> queue = new LinkedList<>();
        
        queue.offer(node);
        
        Set<Integer> set = new HashSet<>();
        
        while (queue.size() > 0) {
            int curNode = queue.poll();
            if (visited.contains(curNode))
                continue;
            visited.add(curNode);
            set.add(curNode);
            for (int i=0; i<n; i++) {
                if (graph[curNode][i] == 1 && !visited.contains(i))
                    queue.offer(i);
            }
        }
        
        return set;
    }
    
    private List<Set<Integer>> getInfections(List<Set<Integer>> groups, int[] initial) {
        
        List<Set<Integer>> list = new ArrayList<>();
        
        for (Set<Integer> set : groups) {
            
            Set<Integer> infectSet = new HashSet<>();
            
            for (int i : initial) {
                if (set.contains(i)) {
                    infectSet.add(i);
                }
            }
            
            list.add(infectSet);
        }
        
        return list;
    }
    
}
